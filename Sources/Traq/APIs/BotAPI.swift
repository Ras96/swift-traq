//
// BotAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
    import AnyCodable
#endif

extension TraqAPI {
    open class BotAPI {
        /**
         BOTをアクティベート

         - parameter botId: (path) BOTUUID
         - returns: Void
         */
        @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
        open class func activateBot(botId: UUID) async throws {
            try await activateBotWithRequestBuilder(botId: botId).execute().body
        }

        /**
         BOTをアクティベート
         - POST /bots/{botId}/actions/activate
         - 指定したBOTを有効化します。 対象のBOTの管理権限が必要です。
         - OAuth:
           - type: oauth2
           - name: OAuth2
         - Bearer Token:
           - type: http
           - name: bearerAuth
         - parameter botId: (path) BOTUUID
         - returns: RequestBuilder<Void>
         */
        open class func activateBotWithRequestBuilder(botId: UUID) -> RequestBuilder<Void> {
            var localVariablePath = "/bots/{botId}/actions/activate"
            let botIdPreEscape = "\(APIHelper.mapValueToPathItem(botId))"
            let botIdPostEscape = botIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
            localVariablePath = localVariablePath.replacingOccurrences(of: "{botId}", with: botIdPostEscape, options: .literal, range: nil)
            let localVariableURLString = TraqAPI.basePath + localVariablePath
            let localVariableParameters: [String: Any]? = nil

            let localVariableUrlComponents = URLComponents(string: localVariableURLString)

            let localVariableNillableHeaders: [String: Any?] = [:]

            let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

            let localVariableRequestBuilder: RequestBuilder<Void>.Type = TraqAPI.requestBuilderFactory.getNonDecodableBuilder()

            return localVariableRequestBuilder.init(method: "POST", URLString: localVariableUrlComponents?.string ?? localVariableURLString, parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
        }

        /**
         BOTのアイコン画像を変更

         - parameter botId: (path) BOTUUID
         - parameter file: (form) アイコン画像(1MBまでのpng, jpeg, gif)
         - returns: Void
         */
        @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
        open class func changeBotIcon(botId: UUID, file: URL) async throws {
            try await changeBotIconWithRequestBuilder(botId: botId, file: file).execute().body
        }

        /**
         BOTのアイコン画像を変更
         - PUT /bots/{botId}/icon
         - 指定したBOTのアイコン画像を変更を変更します。 対象のBOTの管理権限が必要です。
         - OAuth:
           - type: oauth2
           - name: OAuth2
         - Bearer Token:
           - type: http
           - name: bearerAuth
         - parameter botId: (path) BOTUUID
         - parameter file: (form) アイコン画像(1MBまでのpng, jpeg, gif)
         - returns: RequestBuilder<Void>
         */
        open class func changeBotIconWithRequestBuilder(botId: UUID, file: URL) -> RequestBuilder<Void> {
            var localVariablePath = "/bots/{botId}/icon"
            let botIdPreEscape = "\(APIHelper.mapValueToPathItem(botId))"
            let botIdPostEscape = botIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
            localVariablePath = localVariablePath.replacingOccurrences(of: "{botId}", with: botIdPostEscape, options: .literal, range: nil)
            let localVariableURLString = TraqAPI.basePath + localVariablePath
            let localVariableFormParams: [String: Any?] = [
                "file": file.encodeToJSON(),
            ]

            let localVariableNonNullParameters = APIHelper.rejectNil(localVariableFormParams)
            let localVariableParameters = APIHelper.convertBoolToString(localVariableNonNullParameters)

            let localVariableUrlComponents = URLComponents(string: localVariableURLString)

            let localVariableNillableHeaders: [String: Any?] = [
                "Content-Type": "multipart/form-data",
            ]

            let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

            let localVariableRequestBuilder: RequestBuilder<Void>.Type = TraqAPI.requestBuilderFactory.getNonDecodableBuilder()

            return localVariableRequestBuilder.init(method: "PUT", URLString: localVariableUrlComponents?.string ?? localVariableURLString, parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
        }

        /**
         WebSocket Mode BOT用通知ストリームに接続します

         - returns: Void
         */
        @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
        open class func connectBotWS() async throws {
            try await connectBotWSWithRequestBuilder().execute().body
        }

        /**
         WebSocket Mode BOT用通知ストリームに接続します
         - GET /bots/ws
         - # BOT WebSocketプロトコル  ## 送信  `コマンド:引数1:引数2:...` のような形式のTextMessageをサーバーに送信することで、このWebSocketセッションに対する設定が実行できます。  ### `rtcstate`コマンド 自分のWebRTC状態を変更します。 他のコネクションが既に状態を保持している場合、変更することができません。  `rtcstate:{チャンネルID}:({状態}:{セッションID})*`  チャンネルIDにnullもしくは空文字を指定するか、状態にnullもしくは空文字を指定した場合、WebRTC状態はリセットされます。  `rtcstate:null`, `rtcstate:`, `rtcstate:channelId:null`, `rtcstate:channelId:`  コネクションが切断された場合、自分のWebRTC状態はリセットされます。  ## 受信  TextMessageとして各種イベントが`type`、`reqId`、`body`を持つJSONとして非同期に送られます。 `body`の内容はHTTP Modeの場合のRequest Bodyと同様です。 例外として`ERROR`イベントは`reqId`を持ちません。  例: PINGイベント `{\"type\":\"PING\",\"reqId\":\"requestId\",\"body\":{\"eventTime\":\"2019-05-07T04:50:48.582586882Z\"}}`  ### `ERROR`  コマンドの引数が不正などの理由でコマンドが受理されなかった場合に送られます。 非同期に送られるため、必ずしもコマンドとの対応関係を確定できないことに注意してください。 本番環境ではERRORが送られないようにすることが望ましいです。  `{\"type\":\"ERROR\",\"body\":\"message\"}`
         - OAuth:
           - type: oauth2
           - name: OAuth2
         - Bearer Token:
           - type: http
           - name: bearerAuth
         - returns: RequestBuilder<Void>
         */
        open class func connectBotWSWithRequestBuilder() -> RequestBuilder<Void> {
            let localVariablePath = "/bots/ws"
            let localVariableURLString = TraqAPI.basePath + localVariablePath
            let localVariableParameters: [String: Any]? = nil

            let localVariableUrlComponents = URLComponents(string: localVariableURLString)

            let localVariableNillableHeaders: [String: Any?] = [:]

            let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

            let localVariableRequestBuilder: RequestBuilder<Void>.Type = TraqAPI.requestBuilderFactory.getNonDecodableBuilder()

            return localVariableRequestBuilder.init(method: "GET", URLString: localVariableUrlComponents?.string ?? localVariableURLString, parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
        }

        /**
         BOTを作成

         - parameter postBotRequest: (body)  (optional)
         - returns: BotDetail
         */
        @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
        open class func createBot(postBotRequest: PostBotRequest? = nil) async throws -> BotDetail {
            try await createBotWithRequestBuilder(postBotRequest: postBotRequest).execute().body
        }

        /**
         BOTを作成
         - POST /bots
         - BOTを作成します。 作成後に購読イベントの設定を行う必要があります。 さらにHTTP Modeの場合はアクティベーションを行う必要があります。
         - OAuth:
           - type: oauth2
           - name: OAuth2
         - Bearer Token:
           - type: http
           - name: bearerAuth
         - parameter postBotRequest: (body)  (optional)
         - returns: RequestBuilder<BotDetail>
         */
        open class func createBotWithRequestBuilder(postBotRequest: PostBotRequest? = nil) -> RequestBuilder<BotDetail> {
            let localVariablePath = "/bots"
            let localVariableURLString = TraqAPI.basePath + localVariablePath
            let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: postBotRequest)

            let localVariableUrlComponents = URLComponents(string: localVariableURLString)

            let localVariableNillableHeaders: [String: Any?] = [:]

            let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

            let localVariableRequestBuilder: RequestBuilder<BotDetail>.Type = TraqAPI.requestBuilderFactory.getBuilder()

            return localVariableRequestBuilder.init(method: "POST", URLString: localVariableUrlComponents?.string ?? localVariableURLString, parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
        }

        /**
         BOTを削除

         - parameter botId: (path) BOTUUID
         - returns: Void
         */
        @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
        open class func deleteBot(botId: UUID) async throws {
            try await deleteBotWithRequestBuilder(botId: botId).execute().body
        }

        /**
         BOTを削除
         - DELETE /bots/{botId}
         - 指定したBOTを削除します。 対象のBOTの管理権限が必要です。
         - OAuth:
           - type: oauth2
           - name: OAuth2
         - Bearer Token:
           - type: http
           - name: bearerAuth
         - parameter botId: (path) BOTUUID
         - returns: RequestBuilder<Void>
         */
        open class func deleteBotWithRequestBuilder(botId: UUID) -> RequestBuilder<Void> {
            var localVariablePath = "/bots/{botId}"
            let botIdPreEscape = "\(APIHelper.mapValueToPathItem(botId))"
            let botIdPostEscape = botIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
            localVariablePath = localVariablePath.replacingOccurrences(of: "{botId}", with: botIdPostEscape, options: .literal, range: nil)
            let localVariableURLString = TraqAPI.basePath + localVariablePath
            let localVariableParameters: [String: Any]? = nil

            let localVariableUrlComponents = URLComponents(string: localVariableURLString)

            let localVariableNillableHeaders: [String: Any?] = [:]

            let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

            let localVariableRequestBuilder: RequestBuilder<Void>.Type = TraqAPI.requestBuilderFactory.getNonDecodableBuilder()

            return localVariableRequestBuilder.init(method: "DELETE", URLString: localVariableUrlComponents?.string ?? localVariableURLString, parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
        }

        /**
         BOT情報を変更

         - parameter botId: (path) BOTUUID
         - parameter patchBotRequest: (body)  (optional)
         - returns: Void
         */
        @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
        open class func editBot(botId: UUID, patchBotRequest: PatchBotRequest? = nil) async throws {
            try await editBotWithRequestBuilder(botId: botId, patchBotRequest: patchBotRequest).execute().body
        }

        /**
         BOT情報を変更
         - PATCH /bots/{botId}
         - 指定したBOTの情報を変更します。 対象のBOTの管理権限が必要です。 BOT開発者UUIDを変更した場合は、変更先ユーザーにBOT管理権限が移譲され、自分自身は権限を失います。
         - OAuth:
           - type: oauth2
           - name: OAuth2
         - Bearer Token:
           - type: http
           - name: bearerAuth
         - parameter botId: (path) BOTUUID
         - parameter patchBotRequest: (body)  (optional)
         - returns: RequestBuilder<Void>
         */
        open class func editBotWithRequestBuilder(botId: UUID, patchBotRequest: PatchBotRequest? = nil) -> RequestBuilder<Void> {
            var localVariablePath = "/bots/{botId}"
            let botIdPreEscape = "\(APIHelper.mapValueToPathItem(botId))"
            let botIdPostEscape = botIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
            localVariablePath = localVariablePath.replacingOccurrences(of: "{botId}", with: botIdPostEscape, options: .literal, range: nil)
            let localVariableURLString = TraqAPI.basePath + localVariablePath
            let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: patchBotRequest)

            let localVariableUrlComponents = URLComponents(string: localVariableURLString)

            let localVariableNillableHeaders: [String: Any?] = [:]

            let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

            let localVariableRequestBuilder: RequestBuilder<Void>.Type = TraqAPI.requestBuilderFactory.getNonDecodableBuilder()

            return localVariableRequestBuilder.init(method: "PATCH", URLString: localVariableUrlComponents?.string ?? localVariableURLString, parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
        }

        /**
         BOT情報を取得

         - parameter botId: (path) BOTUUID
         - parameter detail: (query) 詳細情報を含めるかどうか (optional, default to false)
         - returns: GetBot200Response
         */
        @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
        open class func getBot(botId: UUID, detail: Bool? = nil) async throws -> GetBot200Response {
            try await getBotWithRequestBuilder(botId: botId, detail: detail).execute().body
        }

        /**
         BOT情報を取得
         - GET /bots/{botId}
         - 指定したBOTのBOT情報を取得します。 BOT詳細情報を取得する場合は、対象のBOTの管理権限が必要です。
         - OAuth:
           - type: oauth2
           - name: OAuth2
         - Bearer Token:
           - type: http
           - name: bearerAuth
         - parameter botId: (path) BOTUUID
         - parameter detail: (query) 詳細情報を含めるかどうか (optional, default to false)
         - returns: RequestBuilder<GetBot200Response>
         */
        open class func getBotWithRequestBuilder(botId: UUID, detail: Bool? = nil) -> RequestBuilder<GetBot200Response> {
            var localVariablePath = "/bots/{botId}"
            let botIdPreEscape = "\(APIHelper.mapValueToPathItem(botId))"
            let botIdPostEscape = botIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
            localVariablePath = localVariablePath.replacingOccurrences(of: "{botId}", with: botIdPostEscape, options: .literal, range: nil)
            let localVariableURLString = TraqAPI.basePath + localVariablePath
            let localVariableParameters: [String: Any]? = nil

            var localVariableUrlComponents = URLComponents(string: localVariableURLString)
            localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
                "detail": (wrappedValue: detail?.encodeToJSON(), isExplode: true),
            ])

            let localVariableNillableHeaders: [String: Any?] = [:]

            let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

            let localVariableRequestBuilder: RequestBuilder<GetBot200Response>.Type = TraqAPI.requestBuilderFactory.getBuilder()

            return localVariableRequestBuilder.init(method: "GET", URLString: localVariableUrlComponents?.string ?? localVariableURLString, parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
        }

        /**
         BOTのアイコン画像を取得

         - parameter botId: (path) BOTUUID
         - returns: URL
         */
        @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
        open class func getBotIcon(botId: UUID) async throws -> URL {
            try await getBotIconWithRequestBuilder(botId: botId).execute().body
        }

        /**
         BOTのアイコン画像を取得
         - GET /bots/{botId}/icon
         - 指定したBOTのアイコン画像を取得を取得します。
         - OAuth:
           - type: oauth2
           - name: OAuth2
         - Bearer Token:
           - type: http
           - name: bearerAuth
         - parameter botId: (path) BOTUUID
         - returns: RequestBuilder<URL>
         */
        open class func getBotIconWithRequestBuilder(botId: UUID) -> RequestBuilder<URL> {
            var localVariablePath = "/bots/{botId}/icon"
            let botIdPreEscape = "\(APIHelper.mapValueToPathItem(botId))"
            let botIdPostEscape = botIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
            localVariablePath = localVariablePath.replacingOccurrences(of: "{botId}", with: botIdPostEscape, options: .literal, range: nil)
            let localVariableURLString = TraqAPI.basePath + localVariablePath
            let localVariableParameters: [String: Any]? = nil

            let localVariableUrlComponents = URLComponents(string: localVariableURLString)

            let localVariableNillableHeaders: [String: Any?] = [:]

            let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

            let localVariableRequestBuilder: RequestBuilder<URL>.Type = TraqAPI.requestBuilderFactory.getBuilder()

            return localVariableRequestBuilder.init(method: "GET", URLString: localVariableUrlComponents?.string ?? localVariableURLString, parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
        }

        /**
         BOTのイベントログを取得

         - parameter botId: (path) BOTUUID
         - parameter limit: (query) 取得する件数 (optional)
         - parameter offset: (query) 取得するオフセット (optional, default to 0)
         - returns: [BotEventLog]
         */
        @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
        open class func getBotLogs(botId: UUID, limit: Int? = nil, offset: Int? = nil) async throws -> [BotEventLog] {
            try await getBotLogsWithRequestBuilder(botId: botId, limit: limit, offset: offset).execute().body
        }

        /**
         BOTのイベントログを取得
         - GET /bots/{botId}/logs
         - 指定したBOTのイベントログを取得します。 対象のBOTの管理権限が必要です。
         - OAuth:
           - type: oauth2
           - name: OAuth2
         - Bearer Token:
           - type: http
           - name: bearerAuth
         - parameter botId: (path) BOTUUID
         - parameter limit: (query) 取得する件数 (optional)
         - parameter offset: (query) 取得するオフセット (optional, default to 0)
         - returns: RequestBuilder<[BotEventLog]>
         */
        open class func getBotLogsWithRequestBuilder(botId: UUID, limit: Int? = nil, offset: Int? = nil) -> RequestBuilder<[BotEventLog]> {
            var localVariablePath = "/bots/{botId}/logs"
            let botIdPreEscape = "\(APIHelper.mapValueToPathItem(botId))"
            let botIdPostEscape = botIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
            localVariablePath = localVariablePath.replacingOccurrences(of: "{botId}", with: botIdPostEscape, options: .literal, range: nil)
            let localVariableURLString = TraqAPI.basePath + localVariablePath
            let localVariableParameters: [String: Any]? = nil

            var localVariableUrlComponents = URLComponents(string: localVariableURLString)
            localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
                "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
                "offset": (wrappedValue: offset?.encodeToJSON(), isExplode: true),
            ])

            let localVariableNillableHeaders: [String: Any?] = [:]

            let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

            let localVariableRequestBuilder: RequestBuilder<[BotEventLog]>.Type = TraqAPI.requestBuilderFactory.getBuilder()

            return localVariableRequestBuilder.init(method: "GET", URLString: localVariableUrlComponents?.string ?? localVariableURLString, parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
        }

        /**
         BOTリストを取得

         - parameter all: (query) 全てのBOTを取得するかどうか (optional, default to false)
         - returns: [Bot]
         */
        @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
        open class func getBots(all: Bool? = nil) async throws -> [Bot] {
            try await getBotsWithRequestBuilder(all: all).execute().body
        }

        /**
         BOTリストを取得
         - GET /bots
         - BOT情報のリストを取得します。 allを指定しない場合、自分が開発者のBOTのみを返します。
         - OAuth:
           - type: oauth2
           - name: OAuth2
         - Bearer Token:
           - type: http
           - name: bearerAuth
         - parameter all: (query) 全てのBOTを取得するかどうか (optional, default to false)
         - returns: RequestBuilder<[Bot]>
         */
        open class func getBotsWithRequestBuilder(all: Bool? = nil) -> RequestBuilder<[Bot]> {
            let localVariablePath = "/bots"
            let localVariableURLString = TraqAPI.basePath + localVariablePath
            let localVariableParameters: [String: Any]? = nil

            var localVariableUrlComponents = URLComponents(string: localVariableURLString)
            localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
                "all": (wrappedValue: all?.encodeToJSON(), isExplode: true),
            ])

            let localVariableNillableHeaders: [String: Any?] = [:]

            let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

            let localVariableRequestBuilder: RequestBuilder<[Bot]>.Type = TraqAPI.requestBuilderFactory.getBuilder()

            return localVariableRequestBuilder.init(method: "GET", URLString: localVariableUrlComponents?.string ?? localVariableURLString, parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
        }

        /**
         チャンネル参加中のBOTのリストを取得

         - parameter channelId: (path) チャンネルUUID
         - returns: [BotUser]
         */
        @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
        open class func getChannelBots(channelId: UUID) async throws -> [BotUser] {
            try await getChannelBotsWithRequestBuilder(channelId: channelId).execute().body
        }

        /**
         チャンネル参加中のBOTのリストを取得
         - GET /channels/{channelId}/bots
         - 指定したチャンネルに参加しているBOTのリストを取得します。
         - OAuth:
           - type: oauth2
           - name: OAuth2
         - Bearer Token:
           - type: http
           - name: bearerAuth
         - parameter channelId: (path) チャンネルUUID
         - returns: RequestBuilder<[BotUser]>
         */
        open class func getChannelBotsWithRequestBuilder(channelId: UUID) -> RequestBuilder<[BotUser]> {
            var localVariablePath = "/channels/{channelId}/bots"
            let channelIdPreEscape = "\(APIHelper.mapValueToPathItem(channelId))"
            let channelIdPostEscape = channelIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
            localVariablePath = localVariablePath.replacingOccurrences(of: "{channelId}", with: channelIdPostEscape, options: .literal, range: nil)
            let localVariableURLString = TraqAPI.basePath + localVariablePath
            let localVariableParameters: [String: Any]? = nil

            let localVariableUrlComponents = URLComponents(string: localVariableURLString)

            let localVariableNillableHeaders: [String: Any?] = [:]

            let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

            let localVariableRequestBuilder: RequestBuilder<[BotUser]>.Type = TraqAPI.requestBuilderFactory.getBuilder()

            return localVariableRequestBuilder.init(method: "GET", URLString: localVariableUrlComponents?.string ?? localVariableURLString, parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
        }

        /**
         BOTをインアクティベート

         - parameter botId: (path) BOTUUID
         - returns: Void
         */
        @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
        open class func inactivateBot(botId: UUID) async throws {
            try await inactivateBotWithRequestBuilder(botId: botId).execute().body
        }

        /**
         BOTをインアクティベート
         - POST /bots/{botId}/actions/inactivate
         - 指定したBOTを無効化します。対象のBOTの管理権限が必要です。
         - OAuth:
           - type: oauth2
           - name: OAuth2
         - Bearer Token:
           - type: http
           - name: bearerAuth
         - parameter botId: (path) BOTUUID
         - returns: RequestBuilder<Void>
         */
        open class func inactivateBotWithRequestBuilder(botId: UUID) -> RequestBuilder<Void> {
            var localVariablePath = "/bots/{botId}/actions/inactivate"
            let botIdPreEscape = "\(APIHelper.mapValueToPathItem(botId))"
            let botIdPostEscape = botIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
            localVariablePath = localVariablePath.replacingOccurrences(of: "{botId}", with: botIdPostEscape, options: .literal, range: nil)
            let localVariableURLString = TraqAPI.basePath + localVariablePath
            let localVariableParameters: [String: Any]? = nil

            let localVariableUrlComponents = URLComponents(string: localVariableURLString)

            let localVariableNillableHeaders: [String: Any?] = [:]

            let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

            let localVariableRequestBuilder: RequestBuilder<Void>.Type = TraqAPI.requestBuilderFactory.getNonDecodableBuilder()

            return localVariableRequestBuilder.init(method: "POST", URLString: localVariableUrlComponents?.string ?? localVariableURLString, parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
        }

        /**
         BOTをチャンネルに参加させる

         - parameter botId: (path) BOTUUID
         - parameter postBotActionJoinRequest: (body)  (optional)
         - returns: Void
         */
        @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
        open class func letBotJoinChannel(botId: UUID, postBotActionJoinRequest: PostBotActionJoinRequest? = nil) async throws {
            try await letBotJoinChannelWithRequestBuilder(botId: botId, postBotActionJoinRequest: postBotActionJoinRequest).execute().body
        }

        /**
         BOTをチャンネルに参加させる
         - POST /bots/{botId}/actions/join
         - 指定したBOTを指定したチャンネルに参加させます。 チャンネルに参加したBOTは、そのチャンネルの各種イベントを受け取るようになります。 対象のBOTの管理権限が必要です。
         - OAuth:
           - type: oauth2
           - name: OAuth2
         - Bearer Token:
           - type: http
           - name: bearerAuth
         - parameter botId: (path) BOTUUID
         - parameter postBotActionJoinRequest: (body)  (optional)
         - returns: RequestBuilder<Void>
         */
        open class func letBotJoinChannelWithRequestBuilder(botId: UUID, postBotActionJoinRequest: PostBotActionJoinRequest? = nil) -> RequestBuilder<Void> {
            var localVariablePath = "/bots/{botId}/actions/join"
            let botIdPreEscape = "\(APIHelper.mapValueToPathItem(botId))"
            let botIdPostEscape = botIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
            localVariablePath = localVariablePath.replacingOccurrences(of: "{botId}", with: botIdPostEscape, options: .literal, range: nil)
            let localVariableURLString = TraqAPI.basePath + localVariablePath
            let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: postBotActionJoinRequest)

            let localVariableUrlComponents = URLComponents(string: localVariableURLString)

            let localVariableNillableHeaders: [String: Any?] = [:]

            let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

            let localVariableRequestBuilder: RequestBuilder<Void>.Type = TraqAPI.requestBuilderFactory.getNonDecodableBuilder()

            return localVariableRequestBuilder.init(method: "POST", URLString: localVariableUrlComponents?.string ?? localVariableURLString, parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
        }

        /**
         BOTをチャンネルから退出させる

         - parameter botId: (path) BOTUUID
         - parameter postBotActionLeaveRequest: (body)  (optional)
         - returns: Void
         */
        @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
        open class func letBotLeaveChannel(botId: UUID, postBotActionLeaveRequest: PostBotActionLeaveRequest? = nil) async throws {
            try await letBotLeaveChannelWithRequestBuilder(botId: botId, postBotActionLeaveRequest: postBotActionLeaveRequest).execute().body
        }

        /**
         BOTをチャンネルから退出させる
         - POST /bots/{botId}/actions/leave
         - 指定したBOTを指定したチャンネルから退出させます。 対象のBOTの管理権限が必要です。
         - OAuth:
           - type: oauth2
           - name: OAuth2
         - Bearer Token:
           - type: http
           - name: bearerAuth
         - parameter botId: (path) BOTUUID
         - parameter postBotActionLeaveRequest: (body)  (optional)
         - returns: RequestBuilder<Void>
         */
        open class func letBotLeaveChannelWithRequestBuilder(botId: UUID, postBotActionLeaveRequest: PostBotActionLeaveRequest? = nil) -> RequestBuilder<Void> {
            var localVariablePath = "/bots/{botId}/actions/leave"
            let botIdPreEscape = "\(APIHelper.mapValueToPathItem(botId))"
            let botIdPostEscape = botIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
            localVariablePath = localVariablePath.replacingOccurrences(of: "{botId}", with: botIdPostEscape, options: .literal, range: nil)
            let localVariableURLString = TraqAPI.basePath + localVariablePath
            let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: postBotActionLeaveRequest)

            let localVariableUrlComponents = URLComponents(string: localVariableURLString)

            let localVariableNillableHeaders: [String: Any?] = [:]

            let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

            let localVariableRequestBuilder: RequestBuilder<Void>.Type = TraqAPI.requestBuilderFactory.getNonDecodableBuilder()

            return localVariableRequestBuilder.init(method: "POST", URLString: localVariableUrlComponents?.string ?? localVariableURLString, parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
        }

        /**
         BOTのトークンを再発行

         - parameter botId: (path) BOTUUID
         - returns: BotTokens
         */
        @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
        open class func reissueBot(botId: UUID) async throws -> BotTokens {
            try await reissueBotWithRequestBuilder(botId: botId).execute().body
        }

        /**
         BOTのトークンを再発行
         - POST /bots/{botId}/actions/reissue
         - 指定したBOTの現在の各種トークンを無効化し、再発行を行います。 対象のBOTの管理権限が必要です。
         - OAuth:
           - type: oauth2
           - name: OAuth2
         - Bearer Token:
           - type: http
           - name: bearerAuth
         - parameter botId: (path) BOTUUID
         - returns: RequestBuilder<BotTokens>
         */
        open class func reissueBotWithRequestBuilder(botId: UUID) -> RequestBuilder<BotTokens> {
            var localVariablePath = "/bots/{botId}/actions/reissue"
            let botIdPreEscape = "\(APIHelper.mapValueToPathItem(botId))"
            let botIdPostEscape = botIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
            localVariablePath = localVariablePath.replacingOccurrences(of: "{botId}", with: botIdPostEscape, options: .literal, range: nil)
            let localVariableURLString = TraqAPI.basePath + localVariablePath
            let localVariableParameters: [String: Any]? = nil

            let localVariableUrlComponents = URLComponents(string: localVariableURLString)

            let localVariableNillableHeaders: [String: Any?] = [:]

            let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

            let localVariableRequestBuilder: RequestBuilder<BotTokens>.Type = TraqAPI.requestBuilderFactory.getBuilder()

            return localVariableRequestBuilder.init(method: "POST", URLString: localVariableUrlComponents?.string ?? localVariableURLString, parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
        }
    }
}
