//
// PostWebhookRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
    import AnyCodable
#endif

@available(*, deprecated, renamed: "TraqAPI.PostWebhookRequest")
public typealias PostWebhookRequest = TraqAPI.PostWebhookRequest

public extension TraqAPI {
    /** Webhook作成リクエスト */
    struct PostWebhookRequest: Codable, JSONEncodable, Hashable {
        static let nameRule = StringRule(minLength: 1, maxLength: 32, pattern: nil)
        static let descriptionRule = StringRule(minLength: 1, maxLength: 1000, pattern: nil)
        static let secretRule = StringRule(minLength: nil, maxLength: 50, pattern: nil)
        /** Webhookユーザーの表示名 */
        public var name: String
        /** 説明 */
        public var description: String
        /** デフォルトの投稿先チャンネルUUID */
        public var channelId: UUID
        /** Webhookシークレット */
        public var secret: String

        public init(name: String, description: String, channelId: UUID, secret: String) {
            self.name = name
            self.description = description
            self.channelId = channelId
            self.secret = secret
        }

        public enum CodingKeys: String, CodingKey, CaseIterable {
            case name
            case description
            case channelId
            case secret
        }

        // Encodable protocol methods

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: CodingKeys.self)
            try container.encode(name, forKey: .name)
            try container.encode(description, forKey: .description)
            try container.encode(channelId, forKey: .channelId)
            try container.encode(secret, forKey: .secret)
        }
    }
}
