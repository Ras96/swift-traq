//
// BotDetail.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
    import AnyCodable
#endif

@available(*, deprecated, renamed: "TraqAPI.BotDetail")
public typealias BotDetail = TraqAPI.BotDetail

public extension TraqAPI {
    /** BOT詳細情報 */
    struct BotDetail: Codable, JSONEncodable, Hashable {
        static let descriptionRule = StringRule(minLength: nil, maxLength: 1000, pattern: nil)
        /** BOT UUID */
        public var id: UUID
        /** 更新日時 */
        public var updatedAt: Date
        /** 作成日時 */
        public var createdAt: Date
        public var mode: BotMode
        public var state: BotState
        /** BOTが購読しているイベントの配列 */
        public var subscribeEvents: [String]
        /** BOT開発者UUID */
        public var developerId: UUID
        /** 説明 */
        public var description: String
        /** BOTユーザーUUID */
        public var botUserId: UUID
        public var tokens: BotTokens
        /** BOTサーバーエンドポイント */
        public var endpoint: String
        /** 特権BOTかどうか */
        public var privileged: Bool
        /** BOTが参加しているチャンネルのUUID配列 */
        public var channels: [UUID]

        public init(id: UUID, updatedAt: Date, createdAt: Date, mode: BotMode, state: BotState, subscribeEvents: [String], developerId: UUID, description: String, botUserId: UUID, tokens: BotTokens, endpoint: String, privileged: Bool, channels: [UUID]) {
            self.id = id
            self.updatedAt = updatedAt
            self.createdAt = createdAt
            self.mode = mode
            self.state = state
            self.subscribeEvents = subscribeEvents
            self.developerId = developerId
            self.description = description
            self.botUserId = botUserId
            self.tokens = tokens
            self.endpoint = endpoint
            self.privileged = privileged
            self.channels = channels
        }

        public enum CodingKeys: String, CodingKey, CaseIterable {
            case id
            case updatedAt
            case createdAt
            case mode
            case state
            case subscribeEvents
            case developerId
            case description
            case botUserId
            case tokens
            case endpoint
            case privileged
            case channels
        }

        // Encodable protocol methods

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: CodingKeys.self)
            try container.encode(id, forKey: .id)
            try container.encode(updatedAt, forKey: .updatedAt)
            try container.encode(createdAt, forKey: .createdAt)
            try container.encode(mode, forKey: .mode)
            try container.encode(state, forKey: .state)
            try container.encode(subscribeEvents, forKey: .subscribeEvents)
            try container.encode(developerId, forKey: .developerId)
            try container.encode(description, forKey: .description)
            try container.encode(botUserId, forKey: .botUserId)
            try container.encode(tokens, forKey: .tokens)
            try container.encode(endpoint, forKey: .endpoint)
            try container.encode(privileged, forKey: .privileged)
            try container.encode(channels, forKey: .channels)
        }
    }
}
