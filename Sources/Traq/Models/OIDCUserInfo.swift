//
// OIDCUserInfo.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
    import AnyCodable
#endif

@available(*, deprecated, renamed: "TraqAPI.OIDCUserInfo")
public typealias OIDCUserInfo = TraqAPI.OIDCUserInfo

public extension TraqAPI {
    /** 自分のユーザー詳細情報 */
    struct OIDCUserInfo: Codable, JSONEncodable, Hashable {
        static let nameRule = StringRule(minLength: nil, maxLength: nil, pattern: "/^[a-zA-Z0-9_-]{1,32}$/")
        static let preferredUsernameRule = StringRule(minLength: nil, maxLength: nil, pattern: "/^[a-zA-Z0-9_-]{1,32}$/")
        /** ユーザーUUID */
        public var sub: UUID
        /** ユーザー名 */
        public var name: String
        /** ユーザー名 */
        public var preferredUsername: String
        /** アイコン画像URL */
        public var picture: String
        /** 更新日時 */
        public var updatedAt: Int64?
        public var traq: OIDCTraqUserInfo?

        public init(sub: UUID, name: String, preferredUsername: String, picture: String, updatedAt: Int64? = nil, traq: OIDCTraqUserInfo? = nil) {
            self.sub = sub
            self.name = name
            self.preferredUsername = preferredUsername
            self.picture = picture
            self.updatedAt = updatedAt
            self.traq = traq
        }

        public enum CodingKeys: String, CodingKey, CaseIterable {
            case sub
            case name
            case preferredUsername = "preferred_username"
            case picture
            case updatedAt = "updated_at"
            case traq
        }

        // Encodable protocol methods

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: CodingKeys.self)
            try container.encode(sub, forKey: .sub)
            try container.encode(name, forKey: .name)
            try container.encode(preferredUsername, forKey: .preferredUsername)
            try container.encode(picture, forKey: .picture)
            try container.encodeIfPresent(updatedAt, forKey: .updatedAt)
            try container.encodeIfPresent(traq, forKey: .traq)
        }
    }
}
