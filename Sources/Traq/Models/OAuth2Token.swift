//
// OAuth2Token.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
    import AnyCodable
#endif

@available(*, deprecated, renamed: "TraqAPI.OAuth2Token")
public typealias OAuth2Token = TraqAPI.OAuth2Token

public extension TraqAPI {
    struct OAuth2Token: Codable, JSONEncodable, Hashable {
        public var accessToken: String
        public var tokenType: String
        public var expiresIn: Int?
        public var refreshToken: String?
        public var scope: String?
        public var idToken: String?

        public init(accessToken: String, tokenType: String, expiresIn: Int? = nil, refreshToken: String? = nil, scope: String? = nil, idToken: String? = nil) {
            self.accessToken = accessToken
            self.tokenType = tokenType
            self.expiresIn = expiresIn
            self.refreshToken = refreshToken
            self.scope = scope
            self.idToken = idToken
        }

        public enum CodingKeys: String, CodingKey, CaseIterable {
            case accessToken = "access_token"
            case tokenType = "token_type"
            case expiresIn = "expires_in"
            case refreshToken = "refresh_token"
            case scope
            case idToken = "id_token"
        }

        // Encodable protocol methods

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: CodingKeys.self)
            try container.encode(accessToken, forKey: .accessToken)
            try container.encode(tokenType, forKey: .tokenType)
            try container.encodeIfPresent(expiresIn, forKey: .expiresIn)
            try container.encodeIfPresent(refreshToken, forKey: .refreshToken)
            try container.encodeIfPresent(scope, forKey: .scope)
            try container.encodeIfPresent(idToken, forKey: .idToken)
        }
    }
}
