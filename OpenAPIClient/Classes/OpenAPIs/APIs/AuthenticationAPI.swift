//
// AuthenticationAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class AuthenticationAPI {

    /**
     外部ログインアカウント一覧を取得
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getMyExternalAccounts(apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: [ExternalProviderUser]?, _ error: Error?) -> Void)) -> RequestTask {
        return getMyExternalAccountsWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     外部ログインアカウント一覧を取得
     - GET /users/me/ex-accounts
     - 自分に紐付けられている外部ログインアカウント一覧を取得します。
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - BASIC:
       - type: http
       - name: bearerAuth
     - returns: RequestBuilder<[ExternalProviderUser]> 
     */
    open class func getMyExternalAccountsWithRequestBuilder() -> RequestBuilder<[ExternalProviderUser]> {
        let localVariablePath = "/users/me/ex-accounts"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[ExternalProviderUser]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     自分のログインセッションリストを取得
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getMySessions(apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: [LoginSession]?, _ error: Error?) -> Void)) -> RequestTask {
        return getMySessionsWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     自分のログインセッションリストを取得
     - GET /users/me/sessions
     - 自分のログインセッションのリストを取得します。
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - BASIC:
       - type: http
       - name: bearerAuth
     - returns: RequestBuilder<[LoginSession]> 
     */
    open class func getMySessionsWithRequestBuilder() -> RequestBuilder<[LoginSession]> {
        let localVariablePath = "/users/me/sessions"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[LoginSession]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     外部ログインアカウントを紐付ける
     
     - parameter postLinkExternalAccount: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func linkExternalAccount(postLinkExternalAccount: PostLinkExternalAccount? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return linkExternalAccountWithRequestBuilder(postLinkExternalAccount: postLinkExternalAccount).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     外部ログインアカウントを紐付ける
     - POST /users/me/ex-accounts/link
     - 自分に外部ログインアカウントを紐付けます。 指定した`providerName`がサーバー側で有効である必要があります。 リクエストが受理された場合、外部サービスの認証画面にリダイレクトされ、認証される必要があります。
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter postLinkExternalAccount: (body)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func linkExternalAccountWithRequestBuilder(postLinkExternalAccount: PostLinkExternalAccount? = nil) -> RequestBuilder<Void> {
        let localVariablePath = "/users/me/ex-accounts/link"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: postLinkExternalAccount)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     ログイン
     
     - parameter redirect: (query) リダイレクト先 (optional)
     - parameter postLoginRequest: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func login(redirect: String? = nil, postLoginRequest: PostLoginRequest? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return loginWithRequestBuilder(redirect: redirect, postLoginRequest: postLoginRequest).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     ログイン
     - POST /login
     - ログインします。
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter redirect: (query) リダイレクト先 (optional)
     - parameter postLoginRequest: (body)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func loginWithRequestBuilder(redirect: String? = nil, postLoginRequest: PostLoginRequest? = nil) -> RequestBuilder<Void> {
        let localVariablePath = "/login"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: postLoginRequest)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "redirect": redirect?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     ログアウト
     
     - parameter redirect: (query) リダイレクト先 (optional)
     - parameter all: (query) 全てのセッションでログアウトするかどうか (optional, default to false)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func logout(redirect: String? = nil, all: Bool? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return logoutWithRequestBuilder(redirect: redirect, all: all).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     ログアウト
     - POST /logout
     - ログアウトします。
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter redirect: (query) リダイレクト先 (optional)
     - parameter all: (query) 全てのセッションでログアウトするかどうか (optional, default to false)
     - returns: RequestBuilder<Void> 
     */
    open class func logoutWithRequestBuilder(redirect: String? = nil, all: Bool? = nil) -> RequestBuilder<Void> {
        let localVariablePath = "/logout"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "redirect": redirect?.encodeToJSON(),
            "all": all?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     セッションを無効化
     
     - parameter sessionId: (path) セッションUUID 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func revokeMySession(sessionId: UUID, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return revokeMySessionWithRequestBuilder(sessionId: sessionId).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     セッションを無効化
     - DELETE /users/me/sessions/{sessionId}
     - 指定した自分のセッションを無効化(ログアウト)します。 既に存在しない・無効化されているセッションを指定した場合も`204`を返します。
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter sessionId: (path) セッションUUID 
     - returns: RequestBuilder<Void> 
     */
    open class func revokeMySessionWithRequestBuilder(sessionId: UUID) -> RequestBuilder<Void> {
        var localVariablePath = "/users/me/sessions/{sessionId}"
        let sessionIdPreEscape = "\(APIHelper.mapValueToPathItem(sessionId))"
        let sessionIdPostEscape = sessionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{sessionId}", with: sessionIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     外部ログインアカウントの紐付けを解除
     
     - parameter postUnlinkExternalAccount: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func unlinkExternalAccount(postUnlinkExternalAccount: PostUnlinkExternalAccount? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return unlinkExternalAccountWithRequestBuilder(postUnlinkExternalAccount: postUnlinkExternalAccount).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     外部ログインアカウントの紐付けを解除
     - POST /users/me/ex-accounts/unlink
     - 自分に紐付けられている外部ログインアカウントの紐付けを解除します。
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter postUnlinkExternalAccount: (body)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func unlinkExternalAccountWithRequestBuilder(postUnlinkExternalAccount: PostUnlinkExternalAccount? = nil) -> RequestBuilder<Void> {
        let localVariablePath = "/users/me/ex-accounts/unlink"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: postUnlinkExternalAccount)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }
}
