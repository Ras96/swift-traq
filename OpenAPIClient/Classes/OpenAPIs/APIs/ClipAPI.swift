//
// ClipAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class ClipAPI {

    /**
     メッセージをクリップフォルダに追加
     
     - parameter folderId: (path) クリップフォルダUUID 
     - parameter postClipFolderMessageRequest: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func clipMessage(folderId: UUID, postClipFolderMessageRequest: PostClipFolderMessageRequest? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ClippedMessage?, _ error: Error?) -> Void)) -> RequestTask {
        return clipMessageWithRequestBuilder(folderId: folderId, postClipFolderMessageRequest: postClipFolderMessageRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     メッセージをクリップフォルダに追加
     - POST /clip-folders/{folderId}/messages
     - 指定したメッセージを指定したクリップフォルダに追加します。
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter folderId: (path) クリップフォルダUUID 
     - parameter postClipFolderMessageRequest: (body)  (optional)
     - returns: RequestBuilder<ClippedMessage> 
     */
    open class func clipMessageWithRequestBuilder(folderId: UUID, postClipFolderMessageRequest: PostClipFolderMessageRequest? = nil) -> RequestBuilder<ClippedMessage> {
        var localVariablePath = "/clip-folders/{folderId}/messages"
        let folderIdPreEscape = "\(APIHelper.mapValueToPathItem(folderId))"
        let folderIdPostEscape = folderIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{folderId}", with: folderIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: postClipFolderMessageRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ClippedMessage>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     クリップフォルダを作成
     
     - parameter postClipFolderRequest: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func createClipFolder(postClipFolderRequest: PostClipFolderRequest? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ClipFolder?, _ error: Error?) -> Void)) -> RequestTask {
        return createClipFolderWithRequestBuilder(postClipFolderRequest: postClipFolderRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     クリップフォルダを作成
     - POST /clip-folders
     - クリップフォルダを作成します。 既にあるフォルダと同名のフォルダを作成することは可能です。
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter postClipFolderRequest: (body)  (optional)
     - returns: RequestBuilder<ClipFolder> 
     */
    open class func createClipFolderWithRequestBuilder(postClipFolderRequest: PostClipFolderRequest? = nil) -> RequestBuilder<ClipFolder> {
        let localVariablePath = "/clip-folders"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: postClipFolderRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ClipFolder>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     クリップフォルダを削除
     
     - parameter folderId: (path) クリップフォルダUUID 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func deleteClipFolder(folderId: UUID, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return deleteClipFolderWithRequestBuilder(folderId: folderId).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     クリップフォルダを削除
     - DELETE /clip-folders/{folderId}
     - 指定したクリップフォルダを削除します。
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter folderId: (path) クリップフォルダUUID 
     - returns: RequestBuilder<Void> 
     */
    open class func deleteClipFolderWithRequestBuilder(folderId: UUID) -> RequestBuilder<Void> {
        var localVariablePath = "/clip-folders/{folderId}"
        let folderIdPreEscape = "\(APIHelper.mapValueToPathItem(folderId))"
        let folderIdPostEscape = folderIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{folderId}", with: folderIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     クリップフォルダ情報を編集
     
     - parameter folderId: (path) クリップフォルダUUID 
     - parameter patchClipFolderRequest: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func editClipFolder(folderId: UUID, patchClipFolderRequest: PatchClipFolderRequest? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return editClipFolderWithRequestBuilder(folderId: folderId, patchClipFolderRequest: patchClipFolderRequest).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     クリップフォルダ情報を編集
     - PATCH /clip-folders/{folderId}
     - 指定したクリップフォルダの情報を編集します。
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter folderId: (path) クリップフォルダUUID 
     - parameter patchClipFolderRequest: (body)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func editClipFolderWithRequestBuilder(folderId: UUID, patchClipFolderRequest: PatchClipFolderRequest? = nil) -> RequestBuilder<Void> {
        var localVariablePath = "/clip-folders/{folderId}"
        let folderIdPreEscape = "\(APIHelper.mapValueToPathItem(folderId))"
        let folderIdPostEscape = folderIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{folderId}", with: folderIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: patchClipFolderRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     クリップフォルダ情報を取得
     
     - parameter folderId: (path) クリップフォルダUUID 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getClipFolder(folderId: UUID, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ClipFolder?, _ error: Error?) -> Void)) -> RequestTask {
        return getClipFolderWithRequestBuilder(folderId: folderId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     クリップフォルダ情報を取得
     - GET /clip-folders/{folderId}
     - 指定したクリップフォルダの情報を取得します。
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter folderId: (path) クリップフォルダUUID 
     - returns: RequestBuilder<ClipFolder> 
     */
    open class func getClipFolderWithRequestBuilder(folderId: UUID) -> RequestBuilder<ClipFolder> {
        var localVariablePath = "/clip-folders/{folderId}"
        let folderIdPreEscape = "\(APIHelper.mapValueToPathItem(folderId))"
        let folderIdPostEscape = folderIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{folderId}", with: folderIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ClipFolder>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     クリップフォルダのリストを取得
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getClipFolders(apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: [ClipFolder]?, _ error: Error?) -> Void)) -> RequestTask {
        return getClipFoldersWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     クリップフォルダのリストを取得
     - GET /clip-folders
     - 自身が所有するクリップフォルダのリストを取得します。
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - BASIC:
       - type: http
       - name: bearerAuth
     - returns: RequestBuilder<[ClipFolder]> 
     */
    open class func getClipFoldersWithRequestBuilder() -> RequestBuilder<[ClipFolder]> {
        let localVariablePath = "/clip-folders"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[ClipFolder]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     * enum for parameter order
     */
    public enum Order_getClips: String, CaseIterable {
        case asc = "asc"
        case desc = "desc"
    }

    /**
     フォルダ内のクリップのリストを取得
     
     - parameter folderId: (path) クリップフォルダUUID 
     - parameter limit: (query) 取得する件数 (optional)
     - parameter offset: (query) 取得するオフセット (optional, default to 0)
     - parameter order: (query) 昇順か降順か (optional, default to .desc)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getClips(folderId: UUID, limit: Int? = nil, offset: Int? = nil, order: Order_getClips? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: [ClippedMessage]?, _ error: Error?) -> Void)) -> RequestTask {
        return getClipsWithRequestBuilder(folderId: folderId, limit: limit, offset: offset, order: order).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     フォルダ内のクリップのリストを取得
     - GET /clip-folders/{folderId}/messages
     - 指定したフォルダ内のクリップのリストを取得します。 `order`を指定しない場合、クリップした日時の新しい順で返されます。
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter folderId: (path) クリップフォルダUUID 
     - parameter limit: (query) 取得する件数 (optional)
     - parameter offset: (query) 取得するオフセット (optional, default to 0)
     - parameter order: (query) 昇順か降順か (optional, default to .desc)
     - returns: RequestBuilder<[ClippedMessage]> 
     */
    open class func getClipsWithRequestBuilder(folderId: UUID, limit: Int? = nil, offset: Int? = nil, order: Order_getClips? = nil) -> RequestBuilder<[ClippedMessage]> {
        var localVariablePath = "/clip-folders/{folderId}/messages"
        let folderIdPreEscape = "\(APIHelper.mapValueToPathItem(folderId))"
        let folderIdPostEscape = folderIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{folderId}", with: folderIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
            "order": order?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[ClippedMessage]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     自分のクリップを取得
     
     - parameter messageId: (path) メッセージUUID 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getMessageClips(messageId: UUID, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: [MessageClip]?, _ error: Error?) -> Void)) -> RequestTask {
        return getMessageClipsWithRequestBuilder(messageId: messageId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     自分のクリップを取得
     - GET /messages/{messageId}/clips
     - 対象のメッセージの自分のクリップの一覧を返します。
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter messageId: (path) メッセージUUID 
     - returns: RequestBuilder<[MessageClip]> 
     */
    open class func getMessageClipsWithRequestBuilder(messageId: UUID) -> RequestBuilder<[MessageClip]> {
        var localVariablePath = "/messages/{messageId}/clips"
        let messageIdPreEscape = "\(APIHelper.mapValueToPathItem(messageId))"
        let messageIdPostEscape = messageIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{messageId}", with: messageIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[MessageClip]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     メッセージをクリップフォルダから除外
     
     - parameter folderId: (path) クリップフォルダUUID 
     - parameter messageId: (path) メッセージUUID 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func unclipMessage(folderId: UUID, messageId: UUID, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return unclipMessageWithRequestBuilder(folderId: folderId, messageId: messageId).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     メッセージをクリップフォルダから除外
     - DELETE /clip-folders/{folderId}/messages/{messageId}
     - 指定したフォルダから指定したメッセージのクリップを除外します。 既に外されているメッセージを指定した場合は204を返します。
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter folderId: (path) クリップフォルダUUID 
     - parameter messageId: (path) メッセージUUID 
     - returns: RequestBuilder<Void> 
     */
    open class func unclipMessageWithRequestBuilder(folderId: UUID, messageId: UUID) -> RequestBuilder<Void> {
        var localVariablePath = "/clip-folders/{folderId}/messages/{messageId}"
        let folderIdPreEscape = "\(APIHelper.mapValueToPathItem(folderId))"
        let folderIdPostEscape = folderIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{folderId}", with: folderIdPostEscape, options: .literal, range: nil)
        let messageIdPreEscape = "\(APIHelper.mapValueToPathItem(messageId))"
        let messageIdPostEscape = messageIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{messageId}", with: messageIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }
}
