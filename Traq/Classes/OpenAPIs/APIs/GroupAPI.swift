//
// GroupAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
    import AnyCodable
#endif

extension TraqAPI {
    open class GroupAPI {
        /**
         グループ管理者を追加

         - parameter groupId: (path) ユーザーグループUUID
         - parameter postUserGroupAdminRequest: (body)  (optional)
         - returns: Void
         */
        @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
        open class func addUserGroupAdmin(groupId: UUID, postUserGroupAdminRequest: PostUserGroupAdminRequest? = nil) async throws {
            var requestTask: RequestTask?
            return try await withTaskCancellationHandler {
                try Task.checkCancellation()
                return try await withCheckedThrowingContinuation { continuation in
                    guard !Task.isCancelled else {
                        continuation.resume(throwing: CancellationError())
                        return
                    }

                    requestTask = addUserGroupAdminWithRequestBuilder(groupId: groupId, postUserGroupAdminRequest: postUserGroupAdminRequest).execute { result in
                        switch result {
                        case .success:
                            continuation.resume(returning: ())
                        case let .failure(error):
                            continuation.resume(throwing: error)
                        }
                    }
                }
            } onCancel: { [requestTask] in
                requestTask?.cancel()
            }
        }

        /**
         グループ管理者を追加

         - parameter groupId: (path) ユーザーグループUUID
         - parameter postUserGroupAdminRequest: (body)  (optional)
         - parameter apiResponseQueue: The queue on which api response is dispatched.
         - parameter completion: completion handler to receive the result
         */
        @discardableResult
        open class func addUserGroupAdmin(groupId: UUID, postUserGroupAdminRequest: PostUserGroupAdminRequest? = nil, apiResponseQueue: DispatchQueue = TraqAPI.apiResponseQueue, completion: @escaping ((_ result: Swift.Result<Void, ErrorResponse>) -> Void)) -> RequestTask {
            return addUserGroupAdminWithRequestBuilder(groupId: groupId, postUserGroupAdminRequest: postUserGroupAdminRequest).execute(apiResponseQueue) { result in
                switch result {
                case .success:
                    completion(.success(()))
                case let .failure(error):
                    completion(.failure(error))
                }
            }
        }

        /**
         グループ管理者を追加
         - POST /groups/{groupId}/admins
         - 指定したグループに管理者を追加します。 対象のユーザーグループの管理者権限が必要です。
         - OAuth:
           - type: oauth2
           - name: OAuth2
         - BASIC:
           - type: http
           - name: bearerAuth
         - parameter groupId: (path) ユーザーグループUUID
         - parameter postUserGroupAdminRequest: (body)  (optional)
         - returns: RequestBuilder<Void>
         */
        open class func addUserGroupAdminWithRequestBuilder(groupId: UUID, postUserGroupAdminRequest: PostUserGroupAdminRequest? = nil) -> RequestBuilder<Void> {
            var localVariablePath = "/groups/{groupId}/admins"
            let groupIdPreEscape = "\(APIHelper.mapValueToPathItem(groupId))"
            let groupIdPostEscape = groupIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
            localVariablePath = localVariablePath.replacingOccurrences(of: "{groupId}", with: groupIdPostEscape, options: .literal, range: nil)
            let localVariableURLString = TraqAPI.basePath + localVariablePath
            let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: postUserGroupAdminRequest)

            let localVariableUrlComponents = URLComponents(string: localVariableURLString)

            let localVariableNillableHeaders: [String: Any?] = [:]

            let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

            let localVariableRequestBuilder: RequestBuilder<Void>.Type = TraqAPI.requestBuilderFactory.getNonDecodableBuilder()

            return localVariableRequestBuilder.init(method: "POST", URLString: localVariableUrlComponents?.string ?? localVariableURLString, parameters: localVariableParameters, headers: localVariableHeaderParameters)
        }

        /**
         グループメンバーを追加

         - parameter groupId: (path) ユーザーグループUUID
         - parameter userGroupMember: (body)  (optional)
         - returns: Void
         */
        @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
        open class func addUserGroupMember(groupId: UUID, userGroupMember: UserGroupMember? = nil) async throws {
            var requestTask: RequestTask?
            return try await withTaskCancellationHandler {
                try Task.checkCancellation()
                return try await withCheckedThrowingContinuation { continuation in
                    guard !Task.isCancelled else {
                        continuation.resume(throwing: CancellationError())
                        return
                    }

                    requestTask = addUserGroupMemberWithRequestBuilder(groupId: groupId, userGroupMember: userGroupMember).execute { result in
                        switch result {
                        case .success:
                            continuation.resume(returning: ())
                        case let .failure(error):
                            continuation.resume(throwing: error)
                        }
                    }
                }
            } onCancel: { [requestTask] in
                requestTask?.cancel()
            }
        }

        /**
         グループメンバーを追加

         - parameter groupId: (path) ユーザーグループUUID
         - parameter userGroupMember: (body)  (optional)
         - parameter apiResponseQueue: The queue on which api response is dispatched.
         - parameter completion: completion handler to receive the result
         */
        @discardableResult
        open class func addUserGroupMember(groupId: UUID, userGroupMember: UserGroupMember? = nil, apiResponseQueue: DispatchQueue = TraqAPI.apiResponseQueue, completion: @escaping ((_ result: Swift.Result<Void, ErrorResponse>) -> Void)) -> RequestTask {
            return addUserGroupMemberWithRequestBuilder(groupId: groupId, userGroupMember: userGroupMember).execute(apiResponseQueue) { result in
                switch result {
                case .success:
                    completion(.success(()))
                case let .failure(error):
                    completion(.failure(error))
                }
            }
        }

        /**
         グループメンバーを追加
         - POST /groups/{groupId}/members
         - 指定したグループにメンバーを追加します。 対象のユーザーグループの管理者権限が必要です。
         - OAuth:
           - type: oauth2
           - name: OAuth2
         - BASIC:
           - type: http
           - name: bearerAuth
         - parameter groupId: (path) ユーザーグループUUID
         - parameter userGroupMember: (body)  (optional)
         - returns: RequestBuilder<Void>
         */
        open class func addUserGroupMemberWithRequestBuilder(groupId: UUID, userGroupMember: UserGroupMember? = nil) -> RequestBuilder<Void> {
            var localVariablePath = "/groups/{groupId}/members"
            let groupIdPreEscape = "\(APIHelper.mapValueToPathItem(groupId))"
            let groupIdPostEscape = groupIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
            localVariablePath = localVariablePath.replacingOccurrences(of: "{groupId}", with: groupIdPostEscape, options: .literal, range: nil)
            let localVariableURLString = TraqAPI.basePath + localVariablePath
            let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: userGroupMember)

            let localVariableUrlComponents = URLComponents(string: localVariableURLString)

            let localVariableNillableHeaders: [String: Any?] = [:]

            let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

            let localVariableRequestBuilder: RequestBuilder<Void>.Type = TraqAPI.requestBuilderFactory.getNonDecodableBuilder()

            return localVariableRequestBuilder.init(method: "POST", URLString: localVariableUrlComponents?.string ?? localVariableURLString, parameters: localVariableParameters, headers: localVariableHeaderParameters)
        }

        /**
         ユーザーグループのアイコンを変更

         - parameter groupId: (path) ユーザーグループUUID
         - parameter file: (form) アイコン画像(1MBまでのpng, jpeg, gif)
         - returns: Void
         */
        @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
        open class func changeUserGroupIcon(groupId: UUID, file: URL) async throws {
            var requestTask: RequestTask?
            return try await withTaskCancellationHandler {
                try Task.checkCancellation()
                return try await withCheckedThrowingContinuation { continuation in
                    guard !Task.isCancelled else {
                        continuation.resume(throwing: CancellationError())
                        return
                    }

                    requestTask = changeUserGroupIconWithRequestBuilder(groupId: groupId, file: file).execute { result in
                        switch result {
                        case .success:
                            continuation.resume(returning: ())
                        case let .failure(error):
                            continuation.resume(throwing: error)
                        }
                    }
                }
            } onCancel: { [requestTask] in
                requestTask?.cancel()
            }
        }

        /**
         ユーザーグループのアイコンを変更

         - parameter groupId: (path) ユーザーグループUUID
         - parameter file: (form) アイコン画像(1MBまでのpng, jpeg, gif)
         - parameter apiResponseQueue: The queue on which api response is dispatched.
         - parameter completion: completion handler to receive the result
         */
        @discardableResult
        open class func changeUserGroupIcon(groupId: UUID, file: URL, apiResponseQueue: DispatchQueue = TraqAPI.apiResponseQueue, completion: @escaping ((_ result: Swift.Result<Void, ErrorResponse>) -> Void)) -> RequestTask {
            return changeUserGroupIconWithRequestBuilder(groupId: groupId, file: file).execute(apiResponseQueue) { result in
                switch result {
                case .success:
                    completion(.success(()))
                case let .failure(error):
                    completion(.failure(error))
                }
            }
        }

        /**
         ユーザーグループのアイコンを変更
         - PUT /groups/{groupId}/icon
         - ユーザーグループのアイコンを変更します。 対象のユーザーグループの管理者権限が必要です。
         - OAuth:
           - type: oauth2
           - name: OAuth2
         - BASIC:
           - type: http
           - name: bearerAuth
         - parameter groupId: (path) ユーザーグループUUID
         - parameter file: (form) アイコン画像(1MBまでのpng, jpeg, gif)
         - returns: RequestBuilder<Void>
         */
        open class func changeUserGroupIconWithRequestBuilder(groupId: UUID, file: URL) -> RequestBuilder<Void> {
            var localVariablePath = "/groups/{groupId}/icon"
            let groupIdPreEscape = "\(APIHelper.mapValueToPathItem(groupId))"
            let groupIdPostEscape = groupIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
            localVariablePath = localVariablePath.replacingOccurrences(of: "{groupId}", with: groupIdPostEscape, options: .literal, range: nil)
            let localVariableURLString = TraqAPI.basePath + localVariablePath
            let localVariableFormParams: [String: Any?] = [
                "file": file.encodeToJSON(),
            ]

            let localVariableNonNullParameters = APIHelper.rejectNil(localVariableFormParams)
            let localVariableParameters = APIHelper.convertBoolToString(localVariableNonNullParameters)

            let localVariableUrlComponents = URLComponents(string: localVariableURLString)

            let localVariableNillableHeaders: [String: Any?] = [
                "Content-Type": "multipart/form-data",
            ]

            let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

            let localVariableRequestBuilder: RequestBuilder<Void>.Type = TraqAPI.requestBuilderFactory.getNonDecodableBuilder()

            return localVariableRequestBuilder.init(method: "PUT", URLString: localVariableUrlComponents?.string ?? localVariableURLString, parameters: localVariableParameters, headers: localVariableHeaderParameters)
        }

        /**
         ユーザーグループを作成

         - parameter postUserGroupRequest: (body)  (optional)
         - returns: UserGroup
         */
        @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
        open class func createUserGroup(postUserGroupRequest: PostUserGroupRequest? = nil) async throws -> UserGroup {
            var requestTask: RequestTask?
            return try await withTaskCancellationHandler {
                try Task.checkCancellation()
                return try await withCheckedThrowingContinuation { continuation in
                    guard !Task.isCancelled else {
                        continuation.resume(throwing: CancellationError())
                        return
                    }

                    requestTask = createUserGroupWithRequestBuilder(postUserGroupRequest: postUserGroupRequest).execute { result in
                        switch result {
                        case let .success(response):
                            continuation.resume(returning: response.body)
                        case let .failure(error):
                            continuation.resume(throwing: error)
                        }
                    }
                }
            } onCancel: { [requestTask] in
                requestTask?.cancel()
            }
        }

        /**
         ユーザーグループを作成

         - parameter postUserGroupRequest: (body)  (optional)
         - parameter apiResponseQueue: The queue on which api response is dispatched.
         - parameter completion: completion handler to receive the result
         */
        @discardableResult
        open class func createUserGroup(postUserGroupRequest: PostUserGroupRequest? = nil, apiResponseQueue: DispatchQueue = TraqAPI.apiResponseQueue, completion: @escaping ((_ result: Swift.Result<UserGroup, ErrorResponse>) -> Void)) -> RequestTask {
            return createUserGroupWithRequestBuilder(postUserGroupRequest: postUserGroupRequest).execute(apiResponseQueue) { result in
                switch result {
                case let .success(response):
                    completion(.success(response.body))
                case let .failure(error):
                    completion(.failure(error))
                }
            }
        }

        /**
         ユーザーグループを作成
         - POST /groups
         - ユーザーグループを作成します。 作成者は自動的にグループ管理者になります。
         - OAuth:
           - type: oauth2
           - name: OAuth2
         - BASIC:
           - type: http
           - name: bearerAuth
         - parameter postUserGroupRequest: (body)  (optional)
         - returns: RequestBuilder<UserGroup>
         */
        open class func createUserGroupWithRequestBuilder(postUserGroupRequest: PostUserGroupRequest? = nil) -> RequestBuilder<UserGroup> {
            let localVariablePath = "/groups"
            let localVariableURLString = TraqAPI.basePath + localVariablePath
            let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: postUserGroupRequest)

            let localVariableUrlComponents = URLComponents(string: localVariableURLString)

            let localVariableNillableHeaders: [String: Any?] = [:]

            let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

            let localVariableRequestBuilder: RequestBuilder<UserGroup>.Type = TraqAPI.requestBuilderFactory.getBuilder()

            return localVariableRequestBuilder.init(method: "POST", URLString: localVariableUrlComponents?.string ?? localVariableURLString, parameters: localVariableParameters, headers: localVariableHeaderParameters)
        }

        /**
         ユーザーグループを削除

         - parameter groupId: (path) ユーザーグループUUID
         - returns: Void
         */
        @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
        open class func deleteUserGroup(groupId: UUID) async throws {
            var requestTask: RequestTask?
            return try await withTaskCancellationHandler {
                try Task.checkCancellation()
                return try await withCheckedThrowingContinuation { continuation in
                    guard !Task.isCancelled else {
                        continuation.resume(throwing: CancellationError())
                        return
                    }

                    requestTask = deleteUserGroupWithRequestBuilder(groupId: groupId).execute { result in
                        switch result {
                        case .success:
                            continuation.resume(returning: ())
                        case let .failure(error):
                            continuation.resume(throwing: error)
                        }
                    }
                }
            } onCancel: { [requestTask] in
                requestTask?.cancel()
            }
        }

        /**
         ユーザーグループを削除

         - parameter groupId: (path) ユーザーグループUUID
         - parameter apiResponseQueue: The queue on which api response is dispatched.
         - parameter completion: completion handler to receive the result
         */
        @discardableResult
        open class func deleteUserGroup(groupId: UUID, apiResponseQueue: DispatchQueue = TraqAPI.apiResponseQueue, completion: @escaping ((_ result: Swift.Result<Void, ErrorResponse>) -> Void)) -> RequestTask {
            return deleteUserGroupWithRequestBuilder(groupId: groupId).execute(apiResponseQueue) { result in
                switch result {
                case .success:
                    completion(.success(()))
                case let .failure(error):
                    completion(.failure(error))
                }
            }
        }

        /**
         ユーザーグループを削除
         - DELETE /groups/{groupId}
         - 指定したユーザーグループを削除します。 対象のユーザーグループの管理者権限が必要です。
         - OAuth:
           - type: oauth2
           - name: OAuth2
         - BASIC:
           - type: http
           - name: bearerAuth
         - parameter groupId: (path) ユーザーグループUUID
         - returns: RequestBuilder<Void>
         */
        open class func deleteUserGroupWithRequestBuilder(groupId: UUID) -> RequestBuilder<Void> {
            var localVariablePath = "/groups/{groupId}"
            let groupIdPreEscape = "\(APIHelper.mapValueToPathItem(groupId))"
            let groupIdPostEscape = groupIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
            localVariablePath = localVariablePath.replacingOccurrences(of: "{groupId}", with: groupIdPostEscape, options: .literal, range: nil)
            let localVariableURLString = TraqAPI.basePath + localVariablePath
            let localVariableParameters: [String: Any]? = nil

            let localVariableUrlComponents = URLComponents(string: localVariableURLString)

            let localVariableNillableHeaders: [String: Any?] = [:]

            let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

            let localVariableRequestBuilder: RequestBuilder<Void>.Type = TraqAPI.requestBuilderFactory.getNonDecodableBuilder()

            return localVariableRequestBuilder.init(method: "DELETE", URLString: localVariableUrlComponents?.string ?? localVariableURLString, parameters: localVariableParameters, headers: localVariableHeaderParameters)
        }

        /**
         ユーザーグループを編集

         - parameter groupId: (path) ユーザーグループUUID
         - parameter patchUserGroupRequest: (body)  (optional)
         - returns: Void
         */
        @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
        open class func editUserGroup(groupId: UUID, patchUserGroupRequest: PatchUserGroupRequest? = nil) async throws {
            var requestTask: RequestTask?
            return try await withTaskCancellationHandler {
                try Task.checkCancellation()
                return try await withCheckedThrowingContinuation { continuation in
                    guard !Task.isCancelled else {
                        continuation.resume(throwing: CancellationError())
                        return
                    }

                    requestTask = editUserGroupWithRequestBuilder(groupId: groupId, patchUserGroupRequest: patchUserGroupRequest).execute { result in
                        switch result {
                        case .success:
                            continuation.resume(returning: ())
                        case let .failure(error):
                            continuation.resume(throwing: error)
                        }
                    }
                }
            } onCancel: { [requestTask] in
                requestTask?.cancel()
            }
        }

        /**
         ユーザーグループを編集

         - parameter groupId: (path) ユーザーグループUUID
         - parameter patchUserGroupRequest: (body)  (optional)
         - parameter apiResponseQueue: The queue on which api response is dispatched.
         - parameter completion: completion handler to receive the result
         */
        @discardableResult
        open class func editUserGroup(groupId: UUID, patchUserGroupRequest: PatchUserGroupRequest? = nil, apiResponseQueue: DispatchQueue = TraqAPI.apiResponseQueue, completion: @escaping ((_ result: Swift.Result<Void, ErrorResponse>) -> Void)) -> RequestTask {
            return editUserGroupWithRequestBuilder(groupId: groupId, patchUserGroupRequest: patchUserGroupRequest).execute(apiResponseQueue) { result in
                switch result {
                case .success:
                    completion(.success(()))
                case let .failure(error):
                    completion(.failure(error))
                }
            }
        }

        /**
         ユーザーグループを編集
         - PATCH /groups/{groupId}
         - 指定したユーザーグループの情報を編集します。 対象のユーザーグループの管理者権限が必要です。
         - OAuth:
           - type: oauth2
           - name: OAuth2
         - BASIC:
           - type: http
           - name: bearerAuth
         - parameter groupId: (path) ユーザーグループUUID
         - parameter patchUserGroupRequest: (body)  (optional)
         - returns: RequestBuilder<Void>
         */
        open class func editUserGroupWithRequestBuilder(groupId: UUID, patchUserGroupRequest: PatchUserGroupRequest? = nil) -> RequestBuilder<Void> {
            var localVariablePath = "/groups/{groupId}"
            let groupIdPreEscape = "\(APIHelper.mapValueToPathItem(groupId))"
            let groupIdPostEscape = groupIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
            localVariablePath = localVariablePath.replacingOccurrences(of: "{groupId}", with: groupIdPostEscape, options: .literal, range: nil)
            let localVariableURLString = TraqAPI.basePath + localVariablePath
            let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: patchUserGroupRequest)

            let localVariableUrlComponents = URLComponents(string: localVariableURLString)

            let localVariableNillableHeaders: [String: Any?] = [:]

            let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

            let localVariableRequestBuilder: RequestBuilder<Void>.Type = TraqAPI.requestBuilderFactory.getNonDecodableBuilder()

            return localVariableRequestBuilder.init(method: "PATCH", URLString: localVariableUrlComponents?.string ?? localVariableURLString, parameters: localVariableParameters, headers: localVariableHeaderParameters)
        }

        /**
         グループメンバーを編集

         - parameter groupId: (path) ユーザーグループUUID
         - parameter userId: (path) ユーザーUUID
         - parameter patchGroupMemberRequest: (body)  (optional)
         - returns: Void
         */
        @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
        open class func editUserGroupMember(groupId: UUID, userId: UUID, patchGroupMemberRequest: PatchGroupMemberRequest? = nil) async throws {
            var requestTask: RequestTask?
            return try await withTaskCancellationHandler {
                try Task.checkCancellation()
                return try await withCheckedThrowingContinuation { continuation in
                    guard !Task.isCancelled else {
                        continuation.resume(throwing: CancellationError())
                        return
                    }

                    requestTask = editUserGroupMemberWithRequestBuilder(groupId: groupId, userId: userId, patchGroupMemberRequest: patchGroupMemberRequest).execute { result in
                        switch result {
                        case .success:
                            continuation.resume(returning: ())
                        case let .failure(error):
                            continuation.resume(throwing: error)
                        }
                    }
                }
            } onCancel: { [requestTask] in
                requestTask?.cancel()
            }
        }

        /**
         グループメンバーを編集

         - parameter groupId: (path) ユーザーグループUUID
         - parameter userId: (path) ユーザーUUID
         - parameter patchGroupMemberRequest: (body)  (optional)
         - parameter apiResponseQueue: The queue on which api response is dispatched.
         - parameter completion: completion handler to receive the result
         */
        @discardableResult
        open class func editUserGroupMember(groupId: UUID, userId: UUID, patchGroupMemberRequest: PatchGroupMemberRequest? = nil, apiResponseQueue: DispatchQueue = TraqAPI.apiResponseQueue, completion: @escaping ((_ result: Swift.Result<Void, ErrorResponse>) -> Void)) -> RequestTask {
            return editUserGroupMemberWithRequestBuilder(groupId: groupId, userId: userId, patchGroupMemberRequest: patchGroupMemberRequest).execute(apiResponseQueue) { result in
                switch result {
                case .success:
                    completion(.success(()))
                case let .failure(error):
                    completion(.failure(error))
                }
            }
        }

        /**
         グループメンバーを編集
         - PATCH /groups/{groupId}/members/{userId}
         - 指定したユーザーグループ内の指定したユーザーの属性を編集します。 対象のユーザーグループの管理者権限が必要です。
         - OAuth:
           - type: oauth2
           - name: OAuth2
         - BASIC:
           - type: http
           - name: bearerAuth
         - parameter groupId: (path) ユーザーグループUUID
         - parameter userId: (path) ユーザーUUID
         - parameter patchGroupMemberRequest: (body)  (optional)
         - returns: RequestBuilder<Void>
         */
        open class func editUserGroupMemberWithRequestBuilder(groupId: UUID, userId: UUID, patchGroupMemberRequest: PatchGroupMemberRequest? = nil) -> RequestBuilder<Void> {
            var localVariablePath = "/groups/{groupId}/members/{userId}"
            let groupIdPreEscape = "\(APIHelper.mapValueToPathItem(groupId))"
            let groupIdPostEscape = groupIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
            localVariablePath = localVariablePath.replacingOccurrences(of: "{groupId}", with: groupIdPostEscape, options: .literal, range: nil)
            let userIdPreEscape = "\(APIHelper.mapValueToPathItem(userId))"
            let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
            localVariablePath = localVariablePath.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
            let localVariableURLString = TraqAPI.basePath + localVariablePath
            let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: patchGroupMemberRequest)

            let localVariableUrlComponents = URLComponents(string: localVariableURLString)

            let localVariableNillableHeaders: [String: Any?] = [:]

            let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

            let localVariableRequestBuilder: RequestBuilder<Void>.Type = TraqAPI.requestBuilderFactory.getNonDecodableBuilder()

            return localVariableRequestBuilder.init(method: "PATCH", URLString: localVariableUrlComponents?.string ?? localVariableURLString, parameters: localVariableParameters, headers: localVariableHeaderParameters)
        }

        /**
         ユーザーグループを取得

         - parameter groupId: (path) ユーザーグループUUID
         - returns: UserGroup
         */
        @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
        open class func getUserGroup(groupId: UUID) async throws -> UserGroup {
            var requestTask: RequestTask?
            return try await withTaskCancellationHandler {
                try Task.checkCancellation()
                return try await withCheckedThrowingContinuation { continuation in
                    guard !Task.isCancelled else {
                        continuation.resume(throwing: CancellationError())
                        return
                    }

                    requestTask = getUserGroupWithRequestBuilder(groupId: groupId).execute { result in
                        switch result {
                        case let .success(response):
                            continuation.resume(returning: response.body)
                        case let .failure(error):
                            continuation.resume(throwing: error)
                        }
                    }
                }
            } onCancel: { [requestTask] in
                requestTask?.cancel()
            }
        }

        /**
         ユーザーグループを取得

         - parameter groupId: (path) ユーザーグループUUID
         - parameter apiResponseQueue: The queue on which api response is dispatched.
         - parameter completion: completion handler to receive the result
         */
        @discardableResult
        open class func getUserGroup(groupId: UUID, apiResponseQueue: DispatchQueue = TraqAPI.apiResponseQueue, completion: @escaping ((_ result: Swift.Result<UserGroup, ErrorResponse>) -> Void)) -> RequestTask {
            return getUserGroupWithRequestBuilder(groupId: groupId).execute(apiResponseQueue) { result in
                switch result {
                case let .success(response):
                    completion(.success(response.body))
                case let .failure(error):
                    completion(.failure(error))
                }
            }
        }

        /**
         ユーザーグループを取得
         - GET /groups/{groupId}
         - 指定したユーザーグループの情報を取得します。
         - OAuth:
           - type: oauth2
           - name: OAuth2
         - BASIC:
           - type: http
           - name: bearerAuth
         - parameter groupId: (path) ユーザーグループUUID
         - returns: RequestBuilder<UserGroup>
         */
        open class func getUserGroupWithRequestBuilder(groupId: UUID) -> RequestBuilder<UserGroup> {
            var localVariablePath = "/groups/{groupId}"
            let groupIdPreEscape = "\(APIHelper.mapValueToPathItem(groupId))"
            let groupIdPostEscape = groupIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
            localVariablePath = localVariablePath.replacingOccurrences(of: "{groupId}", with: groupIdPostEscape, options: .literal, range: nil)
            let localVariableURLString = TraqAPI.basePath + localVariablePath
            let localVariableParameters: [String: Any]? = nil

            let localVariableUrlComponents = URLComponents(string: localVariableURLString)

            let localVariableNillableHeaders: [String: Any?] = [:]

            let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

            let localVariableRequestBuilder: RequestBuilder<UserGroup>.Type = TraqAPI.requestBuilderFactory.getBuilder()

            return localVariableRequestBuilder.init(method: "GET", URLString: localVariableUrlComponents?.string ?? localVariableURLString, parameters: localVariableParameters, headers: localVariableHeaderParameters)
        }

        /**
         グループ管理者を取得

         - parameter groupId: (path) ユーザーグループUUID
         - returns: [UUID]
         */
        @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
        open class func getUserGroupAdmins(groupId: UUID) async throws -> [UUID] {
            var requestTask: RequestTask?
            return try await withTaskCancellationHandler {
                try Task.checkCancellation()
                return try await withCheckedThrowingContinuation { continuation in
                    guard !Task.isCancelled else {
                        continuation.resume(throwing: CancellationError())
                        return
                    }

                    requestTask = getUserGroupAdminsWithRequestBuilder(groupId: groupId).execute { result in
                        switch result {
                        case let .success(response):
                            continuation.resume(returning: response.body)
                        case let .failure(error):
                            continuation.resume(throwing: error)
                        }
                    }
                }
            } onCancel: { [requestTask] in
                requestTask?.cancel()
            }
        }

        /**
         グループ管理者を取得

         - parameter groupId: (path) ユーザーグループUUID
         - parameter apiResponseQueue: The queue on which api response is dispatched.
         - parameter completion: completion handler to receive the result
         */
        @discardableResult
        open class func getUserGroupAdmins(groupId: UUID, apiResponseQueue: DispatchQueue = TraqAPI.apiResponseQueue, completion: @escaping ((_ result: Swift.Result<[UUID], ErrorResponse>) -> Void)) -> RequestTask {
            return getUserGroupAdminsWithRequestBuilder(groupId: groupId).execute(apiResponseQueue) { result in
                switch result {
                case let .success(response):
                    completion(.success(response.body))
                case let .failure(error):
                    completion(.failure(error))
                }
            }
        }

        /**
         グループ管理者を取得
         - GET /groups/{groupId}/admins
         - 指定したグループの管理者のリストを取得します。
         - OAuth:
           - type: oauth2
           - name: OAuth2
         - BASIC:
           - type: http
           - name: bearerAuth
         - parameter groupId: (path) ユーザーグループUUID
         - returns: RequestBuilder<[UUID]>
         */
        open class func getUserGroupAdminsWithRequestBuilder(groupId: UUID) -> RequestBuilder<[UUID]> {
            var localVariablePath = "/groups/{groupId}/admins"
            let groupIdPreEscape = "\(APIHelper.mapValueToPathItem(groupId))"
            let groupIdPostEscape = groupIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
            localVariablePath = localVariablePath.replacingOccurrences(of: "{groupId}", with: groupIdPostEscape, options: .literal, range: nil)
            let localVariableURLString = TraqAPI.basePath + localVariablePath
            let localVariableParameters: [String: Any]? = nil

            let localVariableUrlComponents = URLComponents(string: localVariableURLString)

            let localVariableNillableHeaders: [String: Any?] = [:]

            let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

            let localVariableRequestBuilder: RequestBuilder<[UUID]>.Type = TraqAPI.requestBuilderFactory.getBuilder()

            return localVariableRequestBuilder.init(method: "GET", URLString: localVariableUrlComponents?.string ?? localVariableURLString, parameters: localVariableParameters, headers: localVariableHeaderParameters)
        }

        /**
         グループメンバーを取得

         - parameter groupId: (path) ユーザーグループUUID
         - returns: [UserGroupMember]
         */
        @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
        open class func getUserGroupMembers(groupId: UUID) async throws -> [UserGroupMember] {
            var requestTask: RequestTask?
            return try await withTaskCancellationHandler {
                try Task.checkCancellation()
                return try await withCheckedThrowingContinuation { continuation in
                    guard !Task.isCancelled else {
                        continuation.resume(throwing: CancellationError())
                        return
                    }

                    requestTask = getUserGroupMembersWithRequestBuilder(groupId: groupId).execute { result in
                        switch result {
                        case let .success(response):
                            continuation.resume(returning: response.body)
                        case let .failure(error):
                            continuation.resume(throwing: error)
                        }
                    }
                }
            } onCancel: { [requestTask] in
                requestTask?.cancel()
            }
        }

        /**
         グループメンバーを取得

         - parameter groupId: (path) ユーザーグループUUID
         - parameter apiResponseQueue: The queue on which api response is dispatched.
         - parameter completion: completion handler to receive the result
         */
        @discardableResult
        open class func getUserGroupMembers(groupId: UUID, apiResponseQueue: DispatchQueue = TraqAPI.apiResponseQueue, completion: @escaping ((_ result: Swift.Result<[UserGroupMember], ErrorResponse>) -> Void)) -> RequestTask {
            return getUserGroupMembersWithRequestBuilder(groupId: groupId).execute(apiResponseQueue) { result in
                switch result {
                case let .success(response):
                    completion(.success(response.body))
                case let .failure(error):
                    completion(.failure(error))
                }
            }
        }

        /**
         グループメンバーを取得
         - GET /groups/{groupId}/members
         - 指定したグループのメンバーのリストを取得します。
         - OAuth:
           - type: oauth2
           - name: OAuth2
         - BASIC:
           - type: http
           - name: bearerAuth
         - parameter groupId: (path) ユーザーグループUUID
         - returns: RequestBuilder<[UserGroupMember]>
         */
        open class func getUserGroupMembersWithRequestBuilder(groupId: UUID) -> RequestBuilder<[UserGroupMember]> {
            var localVariablePath = "/groups/{groupId}/members"
            let groupIdPreEscape = "\(APIHelper.mapValueToPathItem(groupId))"
            let groupIdPostEscape = groupIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
            localVariablePath = localVariablePath.replacingOccurrences(of: "{groupId}", with: groupIdPostEscape, options: .literal, range: nil)
            let localVariableURLString = TraqAPI.basePath + localVariablePath
            let localVariableParameters: [String: Any]? = nil

            let localVariableUrlComponents = URLComponents(string: localVariableURLString)

            let localVariableNillableHeaders: [String: Any?] = [:]

            let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

            let localVariableRequestBuilder: RequestBuilder<[UserGroupMember]>.Type = TraqAPI.requestBuilderFactory.getBuilder()

            return localVariableRequestBuilder.init(method: "GET", URLString: localVariableUrlComponents?.string ?? localVariableURLString, parameters: localVariableParameters, headers: localVariableHeaderParameters)
        }

        /**
         ユーザーグループのリストを取得

         - returns: [UserGroup]
         */
        @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
        open class func getUserGroups() async throws -> [UserGroup] {
            var requestTask: RequestTask?
            return try await withTaskCancellationHandler {
                try Task.checkCancellation()
                return try await withCheckedThrowingContinuation { continuation in
                    guard !Task.isCancelled else {
                        continuation.resume(throwing: CancellationError())
                        return
                    }

                    requestTask = getUserGroupsWithRequestBuilder().execute { result in
                        switch result {
                        case let .success(response):
                            continuation.resume(returning: response.body)
                        case let .failure(error):
                            continuation.resume(throwing: error)
                        }
                    }
                }
            } onCancel: { [requestTask] in
                requestTask?.cancel()
            }
        }

        /**
         ユーザーグループのリストを取得

         - parameter apiResponseQueue: The queue on which api response is dispatched.
         - parameter completion: completion handler to receive the result
         */
        @discardableResult
        open class func getUserGroups(apiResponseQueue: DispatchQueue = TraqAPI.apiResponseQueue, completion: @escaping ((_ result: Swift.Result<[UserGroup], ErrorResponse>) -> Void)) -> RequestTask {
            return getUserGroupsWithRequestBuilder().execute(apiResponseQueue) { result in
                switch result {
                case let .success(response):
                    completion(.success(response.body))
                case let .failure(error):
                    completion(.failure(error))
                }
            }
        }

        /**
         ユーザーグループのリストを取得
         - GET /groups
         - ユーザーグループのリストを取得します。
         - OAuth:
           - type: oauth2
           - name: OAuth2
         - BASIC:
           - type: http
           - name: bearerAuth
         - returns: RequestBuilder<[UserGroup]>
         */
        open class func getUserGroupsWithRequestBuilder() -> RequestBuilder<[UserGroup]> {
            let localVariablePath = "/groups"
            let localVariableURLString = TraqAPI.basePath + localVariablePath
            let localVariableParameters: [String: Any]? = nil

            let localVariableUrlComponents = URLComponents(string: localVariableURLString)

            let localVariableNillableHeaders: [String: Any?] = [:]

            let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

            let localVariableRequestBuilder: RequestBuilder<[UserGroup]>.Type = TraqAPI.requestBuilderFactory.getBuilder()

            return localVariableRequestBuilder.init(method: "GET", URLString: localVariableUrlComponents?.string ?? localVariableURLString, parameters: localVariableParameters, headers: localVariableHeaderParameters)
        }

        /**
         グループ管理者を削除

         - parameter groupId: (path) ユーザーグループUUID
         - parameter userId: (path) ユーザーUUID
         - returns: Void
         */
        @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
        open class func removeUserGroupAdmin(groupId: UUID, userId: UUID) async throws {
            var requestTask: RequestTask?
            return try await withTaskCancellationHandler {
                try Task.checkCancellation()
                return try await withCheckedThrowingContinuation { continuation in
                    guard !Task.isCancelled else {
                        continuation.resume(throwing: CancellationError())
                        return
                    }

                    requestTask = removeUserGroupAdminWithRequestBuilder(groupId: groupId, userId: userId).execute { result in
                        switch result {
                        case .success:
                            continuation.resume(returning: ())
                        case let .failure(error):
                            continuation.resume(throwing: error)
                        }
                    }
                }
            } onCancel: { [requestTask] in
                requestTask?.cancel()
            }
        }

        /**
         グループ管理者を削除

         - parameter groupId: (path) ユーザーグループUUID
         - parameter userId: (path) ユーザーUUID
         - parameter apiResponseQueue: The queue on which api response is dispatched.
         - parameter completion: completion handler to receive the result
         */
        @discardableResult
        open class func removeUserGroupAdmin(groupId: UUID, userId: UUID, apiResponseQueue: DispatchQueue = TraqAPI.apiResponseQueue, completion: @escaping ((_ result: Swift.Result<Void, ErrorResponse>) -> Void)) -> RequestTask {
            return removeUserGroupAdminWithRequestBuilder(groupId: groupId, userId: userId).execute(apiResponseQueue) { result in
                switch result {
                case .success:
                    completion(.success(()))
                case let .failure(error):
                    completion(.failure(error))
                }
            }
        }

        /**
         グループ管理者を削除
         - DELETE /groups/{groupId}/admins/{userId}
         - 指定したユーザーグループから指定した管理者を削除します。 対象のユーザーグループの管理者権限が必要です。 グループから管理者が存在しなくなる場合は400エラーを返します。
         - OAuth:
           - type: oauth2
           - name: OAuth2
         - BASIC:
           - type: http
           - name: bearerAuth
         - parameter groupId: (path) ユーザーグループUUID
         - parameter userId: (path) ユーザーUUID
         - returns: RequestBuilder<Void>
         */
        open class func removeUserGroupAdminWithRequestBuilder(groupId: UUID, userId: UUID) -> RequestBuilder<Void> {
            var localVariablePath = "/groups/{groupId}/admins/{userId}"
            let groupIdPreEscape = "\(APIHelper.mapValueToPathItem(groupId))"
            let groupIdPostEscape = groupIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
            localVariablePath = localVariablePath.replacingOccurrences(of: "{groupId}", with: groupIdPostEscape, options: .literal, range: nil)
            let userIdPreEscape = "\(APIHelper.mapValueToPathItem(userId))"
            let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
            localVariablePath = localVariablePath.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
            let localVariableURLString = TraqAPI.basePath + localVariablePath
            let localVariableParameters: [String: Any]? = nil

            let localVariableUrlComponents = URLComponents(string: localVariableURLString)

            let localVariableNillableHeaders: [String: Any?] = [:]

            let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

            let localVariableRequestBuilder: RequestBuilder<Void>.Type = TraqAPI.requestBuilderFactory.getNonDecodableBuilder()

            return localVariableRequestBuilder.init(method: "DELETE", URLString: localVariableUrlComponents?.string ?? localVariableURLString, parameters: localVariableParameters, headers: localVariableHeaderParameters)
        }

        /**
         グループメンバーを削除

         - parameter groupId: (path) ユーザーグループUUID
         - parameter userId: (path) ユーザーUUID
         - returns: Void
         */
        @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
        open class func removeUserGroupMember(groupId: UUID, userId: UUID) async throws {
            var requestTask: RequestTask?
            return try await withTaskCancellationHandler {
                try Task.checkCancellation()
                return try await withCheckedThrowingContinuation { continuation in
                    guard !Task.isCancelled else {
                        continuation.resume(throwing: CancellationError())
                        return
                    }

                    requestTask = removeUserGroupMemberWithRequestBuilder(groupId: groupId, userId: userId).execute { result in
                        switch result {
                        case .success:
                            continuation.resume(returning: ())
                        case let .failure(error):
                            continuation.resume(throwing: error)
                        }
                    }
                }
            } onCancel: { [requestTask] in
                requestTask?.cancel()
            }
        }

        /**
         グループメンバーを削除

         - parameter groupId: (path) ユーザーグループUUID
         - parameter userId: (path) ユーザーUUID
         - parameter apiResponseQueue: The queue on which api response is dispatched.
         - parameter completion: completion handler to receive the result
         */
        @discardableResult
        open class func removeUserGroupMember(groupId: UUID, userId: UUID, apiResponseQueue: DispatchQueue = TraqAPI.apiResponseQueue, completion: @escaping ((_ result: Swift.Result<Void, ErrorResponse>) -> Void)) -> RequestTask {
            return removeUserGroupMemberWithRequestBuilder(groupId: groupId, userId: userId).execute(apiResponseQueue) { result in
                switch result {
                case .success:
                    completion(.success(()))
                case let .failure(error):
                    completion(.failure(error))
                }
            }
        }

        /**
         グループメンバーを削除
         - DELETE /groups/{groupId}/members/{userId}
         - 指定したユーザーグループから指定したユーザーを削除します。 既にグループから削除されているメンバーを指定した場合は204を返します。 対象のユーザーグループの管理者権限が必要です。
         - OAuth:
           - type: oauth2
           - name: OAuth2
         - BASIC:
           - type: http
           - name: bearerAuth
         - parameter groupId: (path) ユーザーグループUUID
         - parameter userId: (path) ユーザーUUID
         - returns: RequestBuilder<Void>
         */
        open class func removeUserGroupMemberWithRequestBuilder(groupId: UUID, userId: UUID) -> RequestBuilder<Void> {
            var localVariablePath = "/groups/{groupId}/members/{userId}"
            let groupIdPreEscape = "\(APIHelper.mapValueToPathItem(groupId))"
            let groupIdPostEscape = groupIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
            localVariablePath = localVariablePath.replacingOccurrences(of: "{groupId}", with: groupIdPostEscape, options: .literal, range: nil)
            let userIdPreEscape = "\(APIHelper.mapValueToPathItem(userId))"
            let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
            localVariablePath = localVariablePath.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
            let localVariableURLString = TraqAPI.basePath + localVariablePath
            let localVariableParameters: [String: Any]? = nil

            let localVariableUrlComponents = URLComponents(string: localVariableURLString)

            let localVariableNillableHeaders: [String: Any?] = [:]

            let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

            let localVariableRequestBuilder: RequestBuilder<Void>.Type = TraqAPI.requestBuilderFactory.getNonDecodableBuilder()

            return localVariableRequestBuilder.init(method: "DELETE", URLString: localVariableUrlComponents?.string ?? localVariableURLString, parameters: localVariableParameters, headers: localVariableHeaderParameters)
        }
    }
}
