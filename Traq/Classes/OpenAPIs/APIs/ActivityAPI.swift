//
// ActivityAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

extension TraqAPI {


open class ActivityAPI {

    /**
     アクテビティタイムラインを取得
     
     - parameter limit: (query) 取得する件数 (optional, default to 50)
     - parameter all: (query) 全てのチャンネルのタイムラインを取得する (optional, default to false)
     - parameter perChannel: (query) 同じチャンネルのメッセージは最新のもののみ取得するか (optional, default to false)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getActivityTimeline(limit: Int? = nil, all: Bool? = nil, perChannel: Bool? = nil, apiResponseQueue: DispatchQueue = TraqAPI.apiResponseQueue, completion: @escaping ((_ data: [ActivityTimelineMessage]?, _ error: Error?) -> Void)) -> RequestTask {
        return getActivityTimelineWithRequestBuilder(limit: limit, all: all, perChannel: perChannel).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     アクテビティタイムラインを取得
     - GET /activity/timeline
     - パブリックチャンネルの直近の投稿メッセージを作成日時の降順で取得します。 `all`が`true`でない場合、購読チャンネルのみのタイムラインを取得します
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter limit: (query) 取得する件数 (optional, default to 50)
     - parameter all: (query) 全てのチャンネルのタイムラインを取得する (optional, default to false)
     - parameter perChannel: (query) 同じチャンネルのメッセージは最新のもののみ取得するか (optional, default to false)
     - returns: RequestBuilder<[ActivityTimelineMessage]> 
     */
    open class func getActivityTimelineWithRequestBuilder(limit: Int? = nil, all: Bool? = nil, perChannel: Bool? = nil) -> RequestBuilder<[ActivityTimelineMessage]> {
        let localVariablePath = "/activity/timeline"
        let localVariableURLString = TraqAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "limit": limit?.encodeToJSON(),
            "all": all?.encodeToJSON(),
            "per_channel": perChannel?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[ActivityTimelineMessage]>.Type = TraqAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     オンラインユーザーリストを取得
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getOnlineUsers(apiResponseQueue: DispatchQueue = TraqAPI.apiResponseQueue, completion: @escaping ((_ data: [String]?, _ error: Error?) -> Void)) -> RequestTask {
        return getOnlineUsersWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     オンラインユーザーリストを取得
     - GET /activity/onlines
     - 現在オンラインな(SSEまたはWSが接続中)ユーザーのUUIDのリストを返します。
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - BASIC:
       - type: http
       - name: bearerAuth
     - returns: RequestBuilder<[String]> 
     */
    open class func getOnlineUsersWithRequestBuilder() -> RequestBuilder<[String]> {
        let localVariablePath = "/activity/onlines"
        let localVariableURLString = TraqAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[String]>.Type = TraqAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }
}
}
