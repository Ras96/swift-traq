//
// BotEventLog.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

@available(*, deprecated, renamed: "TraqAPI.BotEventLog")
public typealias BotEventLog = TraqAPI.BotEventLog

extension TraqAPI {

/** BOTイベントログ */
public struct BotEventLog: Codable, JSONEncodable, Hashable {

    /** BOT UUID */
    public var botId: UUID
    /** リクエストUUID */
    public var requestId: UUID
    /** イベントタイプ */
    public var event: String
    public var result: BotEventResult?
    /** ステータスコード */
    public var code: Int
    /** イベント日時 */
    public var datetime: Date

    public init(botId: UUID, requestId: UUID, event: String, result: BotEventResult? = nil, code: Int, datetime: Date) {
        self.botId = botId
        self.requestId = requestId
        self.event = event
        self.result = result
        self.code = code
        self.datetime = datetime
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case botId
        case requestId
        case event
        case result
        case code
        case datetime
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(botId, forKey: .botId)
        try container.encode(requestId, forKey: .requestId)
        try container.encode(event, forKey: .event)
        try container.encodeIfPresent(result, forKey: .result)
        try container.encode(code, forKey: .code)
        try container.encode(datetime, forKey: .datetime)
    }
}

}
