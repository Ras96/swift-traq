//
// PatchBotRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

@available(*, deprecated, renamed: "TraqAPI.PatchBotRequest")
public typealias PatchBotRequest = TraqAPI.PatchBotRequest

extension TraqAPI {

/** BOT情報変更リクエスト */
public struct PatchBotRequest: Codable, JSONEncodable, Hashable {

    /** BOTユーザー表示名 */
    public var displayName: String?
    /** BOTの説明 */
    public var description: String?
    /** 特権 */
    public var privileged: Bool?
    public var mode: BotMode?
    /** BOTサーバーエンドポイント */
    public var endpoint: String?
    /** 移譲先の開発者UUID */
    public var developerId: UUID?
    /** 購読するイベント */
    public var subscribeEvents: [String]?

    public init(displayName: String? = nil, description: String? = nil, privileged: Bool? = nil, mode: BotMode? = nil, endpoint: String? = nil, developerId: UUID? = nil, subscribeEvents: [String]? = nil) {
        self.displayName = displayName
        self.description = description
        self.privileged = privileged
        self.mode = mode
        self.endpoint = endpoint
        self.developerId = developerId
        self.subscribeEvents = subscribeEvents
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case displayName
        case description
        case privileged
        case mode
        case endpoint
        case developerId
        case subscribeEvents
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(displayName, forKey: .displayName)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(privileged, forKey: .privileged)
        try container.encodeIfPresent(mode, forKey: .mode)
        try container.encodeIfPresent(endpoint, forKey: .endpoint)
        try container.encodeIfPresent(developerId, forKey: .developerId)
        try container.encodeIfPresent(subscribeEvents, forKey: .subscribeEvents)
    }
}

}
