//
// FileInfo.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
    import AnyCodable
#endif

@available(*, deprecated, renamed: "TraqAPI.FileInfo")
public typealias FileInfo = TraqAPI.FileInfo

public extension TraqAPI {
    /** ファイル情報 */
    struct FileInfo: Codable, JSONEncodable, Hashable {
        /** ファイルUUID */
        public var id: UUID
        /** ファイル名 */
        public var name: String
        /** MIMEタイプ */
        public var mime: String
        /** ファイルサイズ */
        public var size: Int64
        /** MD5ハッシュ */
        public var md5: String
        /** アニメーション画像かどうか */
        public var isAnimatedImage: Bool
        /** アップロード日時 */
        public var createdAt: Date
        public var thumbnails: [ThumbnailInfo]
        @available(*, deprecated, message: "This property is deprecated.")
        public var thumbnail: FileInfoThumbnail?
        /** 属しているチャンネルUUID */
        public var channelId: UUID?
        /** アップロード者UUID */
        public var uploaderId: UUID?

        public init(id: UUID, name: String, mime: String, size: Int64, md5: String, isAnimatedImage: Bool, createdAt: Date, thumbnails: [ThumbnailInfo], thumbnail: FileInfoThumbnail?, channelId: UUID?, uploaderId: UUID?) {
            self.id = id
            self.name = name
            self.mime = mime
            self.size = size
            self.md5 = md5
            self.isAnimatedImage = isAnimatedImage
            self.createdAt = createdAt
            self.thumbnails = thumbnails
            self.thumbnail = thumbnail
            self.channelId = channelId
            self.uploaderId = uploaderId
        }

        public enum CodingKeys: String, CodingKey, CaseIterable {
            case id
            case name
            case mime
            case size
            case md5
            case isAnimatedImage
            case createdAt
            case thumbnails
            case thumbnail
            case channelId
            case uploaderId
        }

        // Encodable protocol methods

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: CodingKeys.self)
            try container.encode(id, forKey: .id)
            try container.encode(name, forKey: .name)
            try container.encode(mime, forKey: .mime)
            try container.encode(size, forKey: .size)
            try container.encode(md5, forKey: .md5)
            try container.encode(isAnimatedImage, forKey: .isAnimatedImage)
            try container.encode(createdAt, forKey: .createdAt)
            try container.encode(thumbnails, forKey: .thumbnails)
            try container.encode(thumbnail, forKey: .thumbnail)
            try container.encode(channelId, forKey: .channelId)
            try container.encode(uploaderId, forKey: .uploaderId)
        }
    }
}
